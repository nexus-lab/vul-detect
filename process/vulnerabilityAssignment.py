# vulnerabilityAssignment.py
"""
    Static Module containing methods for vulnerability assessment
"""
import csv
import json
from process.users import Users
from process.repo import Repo
from main.githInteract import GitInteract as Git
import os


def return_bandit_vulns(name):
    # Returns list of vulnerabiltites associated with repo using bandit report
    file = os.getcwd() + '\\temp' + '\\bandit' + name + '.csv'

    with open(file, encoding="utf-8") as csv_file:
        cs = csv.DictReader(csv_file)
        ret_list = []
        for row in cs:
            if row["test_id"] in ret_list:
                pass
            else:
                ret_list.append(row["test_id"])

    return ret_list


def return_flawfinder_vulns(name):
    # Returns list of vulnerabilities associated with repo using flawfinder report
    file = os.getcwd() + '\\temp' + '\\flawfinder' + name + '.csv'

    with open(file, encoding="utf-8") as csv_file:
        cs = csv.DictReader(csv_file)
        ret_list = []
        for row in cs:
            if row["CWEs"] in ret_list:
                pass
            else:
                ret_list.append(row["CWEs"])

    return ret_list


def return_gitleaks_vulns(name):
    # Returns list of vulnerabilities of a user
    file = os.getcwd() + '\\temp' + '\\gitleaks' + name + '.json'
    vuln_dict = {}

    with open(file, encoding="utf-8") as json_file:
        js = json.load(json_file)
        try:
            for i in range(len(js)):
                try:
                    vuln_dict[js[i]['author']].append(js[i]['rule'])
                except KeyError:
                    vuln_dict[js[i]['author']] = [js[i]['rule']]
        except TypeError:
            print("Empty scan results/no vulnerabilities")

    return vuln_dict


def construct_users(url):
    # Constructs users object based on repository
    # Returns users object
    git = Git(url)

    vulns = return_gitleaks_vulns(git.get_repo())
    return Users(git.git_collaborators(), git.get_repo(), vulns)


def construct_repository(name):
    # Takes path to scan results. Uses only bandit and flawfinder implementations.
    # Returns repo object
    bandit_vulns = return_bandit_vulns(name)
    ff_vulns = return_flawfinder_vulns(name)

    vulnerabilities = bandit_vulns + ff_vulns

    vuln_dict = {name: vulnerabilities}

    return Repo(name, vuln_dict)
